// src/bot/screens/index.ts
import { web3Provider } from '../../web3/provider';

export interface ScreenContent {
    title: string;
    description: string;
    footer?: string;
}

export class BotScreens {
    static getHomeScreen(): ScreenContent {
        const networkStatus = web3Provider.getNetworkStatus();
        const isTestnet = web3Provider.isTestnet();
        const testnetWarning = isTestnet ? "\n‚ö†Ô∏è *Running on testnet - Safe for testing*" : "\nüî¥ *MAINNET MODE - USE WITH CAUTION*";

        return {
            title: "üöÄ Welcome to ETH Token Deployer",
            description: `
Your one-stop solution for deploying ERC20 tokens on Ethereum!

${networkStatus}${testnetWarning}

*What you can do:*
‚Ä¢ Deploy custom ERC20 tokens
‚Ä¢ Manage contract templates
‚Ä¢ Configure multi-wallet distributions
‚Ä¢ Create liquidity pools

Ready to launch your next token?`,
            footer: "Select an option below to get started üëá"
        };
    }

    static getDeployScreen(): ScreenContent {
        const networkStatus = web3Provider.getNetworkStatus();

        return {
            title: "‚ö° Deploy ERC20 Token",
            description: `
Let's deploy your ERC20 token!

${networkStatus}

*Deployment Process:*
1Ô∏è‚É£ Choose contract template
2Ô∏è‚É£ Configure token parameters
3Ô∏è‚É£ Set up wallet distribution
4Ô∏è‚É£ Review & deploy

*Required Information:*
‚Ä¢ Token name (e.g., "My Awesome Token")
‚Ä¢ Symbol (e.g., "MAT")
‚Ä¢ Total supply (e.g., 1000000)
‚Ä¢ Wallet for deployment`,
            footer: "Choose your deployment option üëá"
        };
    }

    static getErrorScreen(error: string): ScreenContent {
        return {
            title: "‚ùå Error",
            description: `
Something went wrong:

\`${error}\`

Please try again or contact support if the issue persists.`,
            footer: "Use /start to return to home"
        };
    }

    static getSuccessScreen(title: string, message: string): ScreenContent {
        return {
            title: `‚úÖ ${title}`,
            description: message,
            footer: "Use /start to return to home"
        };
    }

    static formatScreen(screen: ScreenContent): string {
        let message = `*${screen.title}*\n\n${screen.description}`;

        if (screen.footer) {
            message += `\n\n${screen.footer}`;
        }

        return message;
    }
}